#!/usr/bin/env python
# Copyright (c) 2014 Spotify AB
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
import argparse
import getpass
import logging
import requests
import sys
import urlparse

USER = getpass.getuser()
DEFAULT_CAUSE = "manual spreaper run"

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s %(name)s %(levelname)s - %(message)s')

log = logging.getLogger("spreaper")
log.debug("logging initialized, username running this: {0}".format(USER))


def _global_arguments(parser):
    parser.add_argument("--reaper-host", default="localhost",
                        help="hostname of the Reaper service [localhost]")
    parser.add_argument("--reaper-port", default="8080",
                        help="port of the Reaper service [8080]")
    parser.add_argument("--reaper-use-ssl", default=False, action='store_true',
                        help="use https to call Reaper [False]")


def _triggering_arguments(parser):
    parser.add_argument("--owner", default=USER,
                        help="name of local user calling the Reaper [{0}]".format(USER))
    parser.add_argument("--cause", default=DEFAULT_CAUSE,
                        help="cause string used for logging and auditing "
                             "purposes [\"{0}\"]".format(DEFAULT_CAUSE))
    parser.add_argument("--keyspace", default=None,
                        help="the keyspace in the Cassandra cluster")
    parser.add_argument("--table", default=None,
                        help="the table within a keyspace in the Cassandra cluster")


def _parse_arguments(description, usage, extra_arguments=None):
    parser = argparse.ArgumentParser(description=description, usage=usage)
    _global_arguments(parser)
    if extra_arguments:
        extra_arguments(parser)
    return parser.parse_args(sys.argv[2:])


class ReaperCLI(object):
    '''Aim of this class is to separate CLI (argparse) specific stuff
    separate from the actual logic of calling Reaper.'''
    def __init__(self):
        parser = argparse.ArgumentParser(
            description="spreaper (Spotify Reaper) CLI tool is used to control "
                        "Reaper service through its REST API",
            usage="""spreaper <command> [<args>]
The available commands are:
    list        List registered Cassandra clusters in a Reaper
    register    Register a Cassandra cluster for repairs
    repair      Trigger a repair on a Cassandra cluster
    status      Show status of a Cassandra cluster or a repair run
""")
        parser.add_argument('command', help='The subcommand to run')
        _global_arguments(parser)
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print 'Unrecognized command: {0}'.format(args.command)
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def init_reaper(self, args):
        return ReaperCaller(args.reaper_host, args.reaper_port, args.reaper_use_ssl)

    def list(self):
        args = _parse_arguments('List all registered Cassandra clusters',
                                'spreaper list [<args>]')
        reaper = self.init_reaper(args)
        print "listing all available clusters in the Reaper"
        reply = reaper.call_list_clusters()
        print "got reply:\n{0}".format(reply)

    def register(self):
        def arguments_for_register(parser):
            parser.add_argument("seed_host",
                                help="the seed host of the Cassandra cluster to be registered")
            parser.add_argument("--trigger-repair", default=False, action='store_true',
                                help="trigger repair immediately upon successful register [False]")
            _triggering_arguments(parser)

        args = _parse_arguments('Register a Cassandra cluster for repairs',
                                'spreaper register [<args>]',
                                arguments_for_register)
        reaper = self.init_reaper(args)
        print "registering Cassandra cluster with seed host: {0}".format(args.seed_host)
        reaper.call_register(args.owner, args.seed_host)
        print "registration succeeded"

    def repair(self):
        def arguments_for_repair(parser):
            parser.add_argument("--seed-host", default=None,
                                help="the seed host of the target Cassandra cluster")
            parser.add_argument("--cluster-name", default=None,
                                help="the name of the target Cassandra cluster")
            _triggering_arguments(parser)

        args = _parse_arguments('Trigger a repair on a Cassandra cluster',
                                'spreaper repair [<args>]',
                                arguments_for_repair)
        reaper = self.init_reaper(args)
        if args.cluster_name:
            print "triggering a repair on Cassandra cluster "\
                  "with name: {0}".format(args.cluster_name)
            reaper.call_register(args.owner, cluster_name=args.cluster_name,
                                 keyspace=args.keyspace, table=args.table, cause=args.cause,
                                 repair_immediately=True)
        else:
            print "triggering a repair on Cassandra cluster "\
                  "with seed host: {0}".format(args.seed_host)
            reaper.call_register(args.owner, seed_host=args.seed_host,
                                 keyspace=args.keyspace, table=args.table, cause=args.cause,
                                 repair_immediately=True)
        print "repair triggering succeeded"

    def status(self):
        args = _parse_arguments('Show status of a Cassandra cluster or a repair run',
                                'spreaper status [<args>]')
        reaper = self.init_reaper(args)
        print "not implemented, just calling ping for testing purposes..."
        reply = reaper.call_ping()
        print "got reply: {0}".format(reply)


class ReaperCaller(object):
    '''Implements the functionality for calling the Reaper service.
    Keep the CLI specific stuff in ReaperCLI.'''
    def __init__(self, host_name, host_port, use_ssl):
        self.base_url = "{0}://{1}:{2}".format(use_ssl and 'https' or 'http',
                                               str(host_name), int(host_port))

    def call_list_clusters(self):
        the_url = urlparse.urljoin(self.base_url, "cluster")
        log.info("making HTTP GET to %s", the_url)
        r = requests.get(the_url)
        log.info("HTTP GET return code %s with content of length %s",
                 r.status_code, len(str(r.text)))
        r.raise_for_status()
        return r.text

    def call_register(self, owner, seed_host=None, cluster_name=None, keyspace=None, table=None,
                      cause=None, repair_immediately=False):
        if not seed_host and not cluster_name:
            print "either seed-host or cluster-name required for registering cluster"
            exit(1)
        if cluster_name:
            params = {"clusterName": cluster_name}
        else:
            params = {"seedHost": seed_host}

        if not keyspace and not table:
            if repair_immediately:
                print "you cannot repair whole cluster, but must define table and keyspace name"
                exit(1)
            the_url = urlparse.urljoin(self.base_url, "cluster")
        elif not keyspace or not table:
            print "both 'keyspace' and 'table' (or neither) required for registering"
            exit(1)
        else:
            the_url = urlparse.urljoin(self.base_url, "table")
            params['keyspace'] = keyspace
            params['table'] = table
            params['owner'] = owner
            params['cause'] = cause and cause or DEFAULT_CAUSE
            if repair_immediately:
                params['startRepair'] = 'true'

        log.info("making HTTP POST to %s with params %s", the_url, params)
        r = requests.post(the_url, params=params)
        log.info("HTTP POST return code %s with content: %s", r.status_code, r.text)
        r.raise_for_status()
        return r.text

    def call_ping(self):
        the_url = urlparse.urljoin(self.base_url, "ping")
        log.info("making HTTP GET to %s", the_url)
        r = requests.get(the_url)
        log.info("HTTP GET return code %s with content: %s", r.status_code, r.text)
        r.raise_for_status()
        return r.text


if __name__ == '__main__':
    ReaperCLI()
